// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IAIModel.sol";

contract Lending {
    IAIModel public aiModel;
    address public owner;

    uint256 public liquidationThreshold = 110; // 110% collateral to loan value threshold for liquidation

    // Loan structure with collateral
    struct Loan {
        uint256 amount;
        uint256 collateralAmount;
        uint256 interestRate;
        uint256 startTime;
        uint256 repaymentDeadline;
        bool isRepaid;
    }

    mapping(address => Loan) public loans;
    mapping(address => uint256) public collateralBalances; // Track collateral balances

    uint256 public totalLoans;

    // Events
    event LoanCreated(address indexed borrower, uint256 amount, uint256 collateralAmount, uint256 interestRate);
    event LoanRepaid(address indexed borrower, uint256 amount, uint256 interestRate);
    event LoanDefaulted(address indexed borrower, uint256 amount, uint256 interestRate);
    event CollateralWithdrawn(address indexed borrower, uint256 amount);
    event CollateralDeposited(address indexed borrower, uint256 amount);
    event LoanLiquidated(address indexed borrower, uint256 collateralAmount, uint256 loanAmount);

    constructor(address _aiModel) {
        aiModel = IAIModel(_aiModel);
        owner = msg.sender;
    }

    // Deposit collateral before taking a loan
    function depositCollateral() external payable {
        require(msg.value > 0, "Collateral must be greater than zero.");
        collateralBalances[msg.sender] += msg.value;
        emit CollateralDeposited(msg.sender, msg.value);
    }

    // Withdraw collateral (must repay loan first or ensure no outstanding loan)
    function withdrawCollateral(uint256 _amount) external {
        require(collateralBalances[msg.sender] >= _amount, "Insufficient collateral balance.");
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount == 0 || userLoan.isRepaid, "Cannot withdraw collateral while loan is active.");
        
        collateralBalances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        emit CollateralWithdrawn(msg.sender, _amount);
    }

    // Function to create a loan with collateral
    function createLoan(uint256 _amount, uint256 _collateralAmount) external {
        require(collateralBalances[msg.sender] >= _collateralAmount, "Insufficient collateral.");

        // AI-driven interest rate adjustment based on prediction factor
        uint256 predictionFactor = aiModel.getPrediction(msg.sender);
        uint256 adjustedInterestRate = (5 + predictionFactor) % 10; // Base rate + AI adjustment

        // Set a repayment deadline, for example, 30 days
        uint256 repaymentDeadline = block.timestamp + 30 days;

        Loan memory newLoan = Loan({
            amount: _amount,
            collateralAmount: _collateralAmount,
            interestRate: adjustedInterestRate,
            startTime: block.timestamp,
            repaymentDeadline: repaymentDeadline,
            isRepaid: false
        });

        loans[msg.sender] = newLoan;
        collateralBalances[msg.sender] -= _collateralAmount;
        totalLoans += _amount;

        emit LoanCreated(msg.sender, _amount, _collateralAmount, adjustedInterestRate);
    }

    // Function to repay the loan
    function repayLoan() external payable {
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount > 0, "No active loan to repay.");
        require(!userLoan.isRepaid, "Loan already repaid.");
        require(block.timestamp <= userLoan.repaymentDeadline, "Loan repayment period has expired.");

        uint256 repayAmount = userLoan.amount + ((userLoan.amount * userLoan.interestRate) / 100);
        require(msg.value >= repayAmount, "Insufficient funds to repay loan.");

        // Refund any excess repayment amount
        if (msg.value > repayAmount) {
            payable(msg.sender).transfer(msg.value - repayAmount);
        }

        userLoan.isRepaid = true;
        totalLoans -= userLoan.amount;

        // Return collateral to the user
        uint256 collateralRefund = userLoan.collateralAmount;
        collateralBalances[msg.sender] += collateralRefund;

        emit LoanRepaid(msg.sender, userLoan.amount, userLoan.interestRate);
    }

    // Function to handle loan defaults (after the repayment deadline)
    function handleLoanDefault() external {
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount > 0, "No active loan.");
        require(block.timestamp > userLoan.repaymentDeadline, "Loan has not defaulted yet.");
        require(!userLoan.isRepaid, "Loan has already been repaid.");

        // Check if the loan has exceeded the liquidation threshold (110% of collateral value)
        uint256 collateralValue = userLoan.collateralAmount;
        uint256 loanValue = userLoan.amount + ((userLoan.amount * userLoan.interestRate) / 100);
        if (loanValue > collateralValue * liquidationThreshold / 100) {
            liquidateLoan(msg.sender, collateralValue, loanValue);
        } else {
            // Loan defaulted, but collateral is still within acceptable threshold
            userLoan.isRepaid = true;
            totalLoans -= userLoan.amount;
            collateralBalances[msg.sender] += collateralValue;
            emit LoanDefaulted(msg.sender, userLoan.amount, userLoan.interestRate);
        }
    }

    // Function to liquidate the loan (if collateral is insufficient)
    function liquidateLoan(address _borrower, uint256 collateralAmount, uint256 loanAmount) internal {
        Loan storage userLoan = loans[_borrower];
        userLoan.isRepaid = true;
        totalLoans -= userLoan.amount;

        // Transfer collateral to the contract (to cover losses)
        uint256 liquidationAmount = collateralAmount > loanAmount ? loanAmount : collateralAmount;
        collateralBalances[owner] += liquidationAmount;

        emit LoanLiquidated(_borrower, liquidationAmount, loanAmount);
    }

    // View function to get loan details
    function getLoanDetails(address _borrower) external view returns (uint256 amount, uint256 collateralAmount, uint256 interestRate, uint256 repaymentDeadline, bool isRepaid) {
        Loan storage userLoan = loans[_borrower];
        return (userLoan.amount, userLoan.collateralAmount, userLoan.interestRate, userLoan.repaymentDeadline, userLoan.isRepaid);
    }

    // View function to check collateral balance
    function getCollateralBalance(address _borrower) external view returns (uint256) {
        return collateralBalances[_borrower];
    }
}// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IAIModel.sol";

contract Lending {
    IAIModel public aiModel;
    address public owner;

    uint256 public liquidationThreshold = 110; // 110% collateral to loan value threshold for liquidation
    uint256 public maxDebtCeiling = 1000000 ether; // Maximum total debt limit for the platform

    // Loan structure with collateral
    struct Loan {
        uint256 amount;
        uint256 collateralAmount;
        uint256 interestRate;
        uint256 startTime;
        uint256 repaymentDeadline;
        bool isRepaid;
    }

    mapping(address => Loan) public loans;
    mapping(address => uint256) public collateralBalances; // Track collateral balances
    uint256 public totalLoans; // Track total debt in the system

    // Events
    event LoanCreated(address indexed borrower, uint256 amount, uint256 collateralAmount, uint256 interestRate);
    event LoanRepaid(address indexed borrower, uint256 amount, uint256 interestRate);
    event LoanDefaulted(address indexed borrower, uint256 amount, uint256 interestRate);
    event CollateralWithdrawn(address indexed borrower, uint256 amount);
    event CollateralDeposited(address indexed borrower, uint256 amount);
    event LoanLiquidated(address indexed borrower, uint256 collateralAmount, uint256 loanAmount);

    constructor(address _aiModel) {
        aiModel = IAIModel(_aiModel);
        owner = msg.sender;
    }

    // Deposit collateral before taking a loan
    function depositCollateral() external payable {
        require(msg.value > 0, "Collateral must be greater than zero.");
        collateralBalances[msg.sender] += msg.value;
        emit CollateralDeposited(msg.sender, msg.value);
    }

    // Withdraw collateral (must repay loan first or ensure no outstanding loan)
    function withdrawCollateral(uint256 _amount) external {
        require(collateralBalances[msg.sender] >= _amount, "Insufficient collateral balance.");
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount == 0 || userLoan.isRepaid, "Cannot withdraw collateral while loan is active.");
        
        collateralBalances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        emit CollateralWithdrawn(msg.sender, _amount);
    }

    // Function to create a loan with collateral
    function createLoan(uint256 _amount, uint256 _collateralAmount) external {
        require(collateralBalances[msg.sender] >= _collateralAmount, "Insufficient collateral.");
        require(totalLoans + _amount <= maxDebtCeiling, "Total platform debt ceiling exceeded.");

        // AI-driven interest rate adjustment based on prediction factor
        uint256 predictionFactor = aiModel.getPrediction(msg.sender);
        uint256 adjustedInterestRate = calculateInterestRate(predictionFactor); 

        // Set a repayment deadline, for example, 30 days
        uint256 repaymentDeadline = block.timestamp + 30 days;

        Loan memory newLoan = Loan({
            amount: _amount,
            collateralAmount: _collateralAmount,
            interestRate: adjustedInterestRate,
            startTime: block.timestamp,
            repaymentDeadline: repaymentDeadline,
            isRepaid: false
        });

        loans[msg.sender] = newLoan;
        collateralBalances[msg.sender] -= _collateralAmount;
        totalLoans += _amount;

        emit LoanCreated(msg.sender, _amount, _collateralAmount, adjustedInterestRate);
    }

    // Calculate dynamic interest rate (based on market predictions)
    function calculateInterestRate(uint256 predictionFactor) internal pure returns (uint256) {
        // Example: Base rate of 5% + AI adjustment (prediction factor influences interest rate)
        uint256 baseRate = 5;  // 5% base rate
        uint256 adjustment = predictionFactor % 10;  // Adjust based on prediction factor (could be market sentiment, risk score)
        return baseRate + adjustment;
    }

    // Function to repay the loan
    function repayLoan() external payable {
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount > 0, "No active loan to repay.");
        require(!userLoan.isRepaid, "Loan already repaid.");
        require(block.timestamp <= userLoan.repaymentDeadline, "Loan repayment period has expired.");

        uint256 repayAmount = userLoan.amount + ((userLoan.amount * userLoan.interestRate) / 100);
        require(msg.value >= repayAmount, "Insufficient funds to repay loan.");

        // Refund any excess repayment amount
        if (msg.value > repayAmount) {
            payable(msg.sender).transfer(msg.value - repayAmount);
        }

        userLoan.isRepaid = true;
        totalLoans -= userLoan.amount;

        // Return collateral to the user
        uint256 collateralRefund = userLoan.collateralAmount;
        collateralBalances[msg.sender] += collateralRefund;

        emit LoanRepaid(msg.sender, userLoan.amount, userLoan.interestRate);
    }

    // Function to handle loan defaults (after the repayment deadline)
    function handleLoanDefault() external {
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount > 0, "No active loan.");
        require(block.timestamp > userLoan.repaymentDeadline, "Loan has not defaulted yet.");
        require(!userLoan.isRepaid, "Loan has already been repaid.");

        // Check if the loan has exceeded the liquidation threshold (110% of collateral value)
        uint256 collateralValue = userLoan.collateralAmount;
        uint256 loanValue = userLoan.amount + ((userLoan.amount * userLoan.interestRate) / 100);
        if (loanValue > collateralValue * liquidationThreshold / 100) {
            liquidateLoan(msg.sender, collateralValue, loanValue);
        } else {
            // Loan defaulted, but collateral is still within acceptable threshold
            userLoan.isRepaid = true;
            totalLoans -= userLoan.amount;
            collateralBalances[msg.sender] += collateralValue;
            emit LoanDefaulted(msg.sender, userLoan.amount, userLoan.interestRate);
        }
    }

    // Function to liquidate the loan (if collateral is insufficient)
    function liquidateLoan(address _borrower, uint256 collateralAmount, uint256 loanAmount) internal {
        Loan storage userLoan = loans[_borrower];
        userLoan.isRepaid = true;
        totalLoans -= userLoan.amount;

        // Transfer collateral to the contract (to cover losses)
        uint256 liquidationAmount = collateralAmount > loanAmount ? loanAmount : collateralAmount;
        collateralBalances[owner] += liquidationAmount;

        emit LoanLiquidated(_borrower, liquidationAmount, loanAmount);
    }

    // View function to get loan details
    function getLoanDetails(address _borrower) external view returns (uint256 amount, uint256 collateralAmount, uint256 interestRate, uint256 repaymentDeadline, bool isRepaid) {
        Loan storage userLoan = loans[_borrower];
        return (userLoan.amount, userLoan.collateralAmount, userLoan.interestRate, userLoan.repaymentDeadline, userLoan.isRepaid);
    }

    // View function to check collateral balance
    function getCollateralBalance(address _borrower) external view returns (uint256) {
        return collateralBalances[_borrower];
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IAIModel.sol";

contract Lending {
    IAIModel public aiModel;
    address public owner;

    uint256 public liquidationThreshold = 110; // 110% collateral to loan value threshold for liquidation
    uint256 public maxDebtCeiling = 1000000 ether; // Maximum total debt limit for the platform

    // Loan structure with collateral
    struct Loan {
        uint256 amount;
        uint256 collateralAmount;
        uint256 interestRate;
        uint256 startTime;
        uint256 repaymentDeadline;
        bool isRepaid;
    }

    mapping(address => Loan) public loans;
    mapping(address => uint256) public collateralBalances; // Track collateral balances
    uint256 public totalLoans; // Track total debt in the system

    // Events
    event LoanCreated(address indexed borrower, uint256 amount, uint256 collateralAmount, uint256 interestRate);
    event LoanRepaid(address indexed borrower, uint256 amount, uint256 interestRate);
    event LoanDefaulted(address indexed borrower, uint256 amount, uint256 interestRate);
    event CollateralWithdrawn(address indexed borrower, uint256 amount);
    event CollateralDeposited(address indexed borrower, uint256 amount);
    event LoanLiquidated(address indexed borrower, uint256 collateralAmount, uint256 loanAmount);

    constructor(address _aiModel) {
        aiModel = IAIModel(_aiModel);
        owner = msg.sender;
    }

    // Deposit collateral before taking a loan
    function depositCollateral() external payable {
        require(msg.value > 0, "Collateral must be greater than zero.");
        collateralBalances[msg.sender] += msg.value;
        emit CollateralDeposited(msg.sender, msg.value);
    }

    // Withdraw collateral (must repay loan first or ensure no outstanding loan)
    function withdrawCollateral(uint256 _amount) external {
        require(collateralBalances[msg.sender] >= _amount, "Insufficient collateral balance.");
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount == 0 || userLoan.isRepaid, "Cannot withdraw collateral while loan is active.");
        
        collateralBalances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        emit CollateralWithdrawn(msg.sender, _amount);
    }

    // Function to create a loan with collateral
    function createLoan(uint256 _amount, uint256 _collateralAmount) external {
        require(collateralBalances[msg.sender] >= _collateralAmount, "Insufficient collateral.");
        require(totalLoans + _amount <= maxDebtCeiling, "Total platform debt ceiling exceeded.");

        // AI-driven interest rate adjustment based on prediction factor
        uint256 predictionFactor = aiModel.getPrediction(msg.sender);
        uint256 adjustedInterestRate = calculateInterestRate(predictionFactor); 

        // Set a repayment deadline, for example, 30 days
        uint256 repaymentDeadline = block.timestamp + 30 days;

        Loan memory newLoan = Loan({
            amount: _amount,
            collateralAmount: _collateralAmount,
            interestRate: adjustedInterestRate,
            startTime: block.timestamp,
            repaymentDeadline: repaymentDeadline,
            isRepaid: false
        });

        loans[msg.sender] = newLoan;
        collateralBalances[msg.sender] -= _collateralAmount;
        totalLoans += _amount;

        emit LoanCreated(msg.sender, _amount, _collateralAmount, adjustedInterestRate);
    }

    // Calculate dynamic interest rate (based on market predictions)
    function calculateInterestRate(uint256 predictionFactor) internal pure returns (uint256) {
        // Example: Base rate of 5% + AI adjustment (prediction factor influences interest rate)
        uint256 baseRate = 5;  // 5% base rate
        uint256 adjustment = predictionFactor % 10;  // Adjust based on prediction factor (could be market sentiment, risk score)
        return baseRate + adjustment;
    }

    // Function to repay the loan
    function repayLoan() external payable {
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount > 0, "No active loan to repay.");
        require(!userLoan.isRepaid, "Loan already repaid.");
        require(block.timestamp <= userLoan.repaymentDeadline, "Loan repayment period has expired.");

        uint256 repayAmount = userLoan.amount + ((userLoan.amount * userLoan.interestRate) / 100);
        require(msg.value >= repayAmount, "Insufficient funds to repay loan.");

        // Refund any excess repayment amount
        if (msg.value > repayAmount) {
            payable(msg.sender).transfer(msg.value - repayAmount);
        }

        userLoan.isRepaid = true;
        totalLoans -= userLoan.amount;

        // Return collateral to the user
        uint256 collateralRefund = userLoan.collateralAmount;
        collateralBalances[msg.sender] += collateralRefund;

        emit LoanRepaid(msg.sender, userLoan.amount, userLoan.interestRate);
    }

    // Function to handle loan defaults (after the repayment deadline)
    function handleLoanDefault() external {
        Loan storage userLoan = loans[msg.sender];
        require(userLoan.amount > 0, "No active loan.");
        require(block.timestamp > userLoan.repaymentDeadline, "Loan has not defaulted yet.");
        require(!userLoan.isRepaid, "Loan has already been repaid.");

        // Check if the loan has exceeded the liquidation threshold (110% of collateral value)
        uint256 collateralValue = userLoan.collateralAmount;
        uint256 loanValue = userLoan.amount + ((userLoan.amount * userLoan.interestRate) / 100);
        if (loanValue > collateralValue * liquidationThreshold / 100) {
            liquidateLoan(msg.sender, collateralValue, loanValue);
        } else {
            // Loan defaulted, but collateral is still within acceptable threshold
            userLoan.isRepaid = true;
            totalLoans -= userLoan.amount;
            collateralBalances[msg.sender] += collateralValue;
            emit LoanDefaulted(msg.sender, userLoan.amount, userLoan.interestRate);
        }
    }

    // Function to liquidate the loan (if collateral is insufficient)
    function liquidateLoan(address _borrower, uint256 collateralAmount, uint256 loanAmount) internal {
        Loan storage userLoan = loans[_borrower];
        userLoan.isRepaid = true;
        totalLoans -= userLoan.amount;

        // Transfer collateral to the contract (to cover losses)
        uint256 liquidationAmount = collateralAmount > loanAmount ? loanAmount : collateralAmount;
        collateralBalances[owner] += liquidationAmount;

        emit LoanLiquidated(_borrower, liquidationAmount, loanAmount);
    }

    // View function to get loan details
    function getLoanDetails(address _borrower) external view returns (uint256 amount, uint256 collateralAmount, uint256 interestRate, uint256 repaymentDeadline, bool isRepaid) {
        Loan storage userLoan = loans[_borrower];
        return (userLoan.amount, userLoan.collateralAmount, userLoan.interestRate, userLoan.repaymentDeadline, userLoan.isRepaid);
    }

    // View function to check collateral balance
    function getCollateralBalance(address _borrower) external view returns (uint256) {
        return collateralBalances[_borrower];
    }
}


